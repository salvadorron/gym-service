// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Difficulty {
  BEGGINER
  INTERMEDIATE
  ADVANCED
}

enum Intencity {
  LOW
  MEDIUM
  HIGH
}

enum GENDER {
  MALE
  FEMALE
}

model Role {
  id String @id
  name String
  users User[]
}

model User {
  id Int @default(autoincrement()) @id
  username String @unique
  password String
  name String 
  last_name String
  age Int
  role Role? @relation(fields: [role_id], references: [id])
  role_id String
  weight Int
  height Int
  gender GENDER @default(MALE)
  medical_conditions String?
  state State @relation(fields: [state_id], references: [id])
  state_id Int
  municipality Municipality @relation(fields: [municipality_id], references: [id])
  municipality_id Int
  parrish Parrish @relation(fields: [parrish_id], references: [id])
  parrish_id Int
  city String
  zip_code String
  address String
  nutritional_plan_id Int?
  nutritional_plan NutritionalPlan? @relation(fields: [nutritional_plan_id], references: [id])
  client Client?
  trainer Trainer?
  admin Admin?
}

model Client {
  id Int @default(autoincrement()) @id
  training_progress Int @default(0)
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int @unique
  plan Plan? @relation(fields: [plan_id], references: [id])
  plan_id Int?
  payments Payment[]
  attendances Attendance[]
  trainer Trainer? @relation(fields: [trainer_id], references: [id], onDelete: Cascade)
  trainer_id Int?
}

model Trainer {
  id Int @default(autoincrement()) @id
  speciality String
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int @unique
  certificates Certificate[]
  clients Client[]
}

model Certificate {
  id Int @id @default(autoincrement())
  name String
  trainers Trainer[]
}

model Admin {
  id Int @default(autoincrement()) @id
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int @unique
}

model Plan {
  id Int @id @default(autoincrement())
  clients Client[]
  trainings Training[]
  name String
  features String
  duration String
  price Decimal

}

model Training {
  id Int @id @default(autoincrement())
  name String
  description String
  excersises Excersise[]
  schedule Schedule?
  plan Plan? @relation(fields: [plan_id], references: [id])
  plan_id Int?
}

model Excersise {
  id Int @id @default(autoincrement())
  name String
  description String?
  difficulty Difficulty @default(BEGGINER)
  equipment String @default("dumbbells")
  muscleGroup String @default("legs")
  type String @default("repetitions")
  weight Int @default(0)
  reps Int @default(0)
  sets Int @default(0)
  notes String?
  distance Int @default(0)
  duration Int @default(0)
  intensity Intencity?
  trainings Training[]
}



model Payment {
  id Int @id @default(autoincrement())
  client Client @relation(fields: [client_id], references: [id])
  client_id Int
  amount Decimal
  method String
  description String
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  status String
}


model Attendance {
  id Int @id @default(autoincrement())
  client Client @relation(fields: [client_id], references: [id])
  client_id Int
  schedule Schedule @relation(fields: [schedule_id], references: [id])
  schedule_id Int
  attendance_date DateTime @db.Date
  status Boolean
}

model Schedule {
  id Int @id @default(autoincrement())
  training Training @relation(fields: [training_id], references: [id])
  training_id Int @unique
  attendances Attendance[]
  days Day[]
  turn String?
}


model Day {
  id Int @id @default(autoincrement())
  schedule Schedule @relation(fields: [schedule_id], references: [id])
  schedule_id Int
  day_of_week String
}


model Municipality {
  id Int @id @default(autoincrement())
  name String
  parrishes Parrish[]
  state State @relation(fields: [state_id], references: [id])
  state_id Int
  users User[]
}

model Parrish {
  id Int @id @default(autoincrement())
  name String
  municipality Municipality @relation(fields: [municipality_id], references: [id])
  municipality_id Int
  users User[]
}

model State {
  id Int @id @default(autoincrement())
  name String
  municipalities Municipality[]
  users User[]
}


model NutritionalPlan {
  id Int @id @default(autoincrement())
  planType String
  calories Int
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  status String
  users User[]

}
